[preset.0]

name="Windows Desktop"
platform="Windows Desktop"
runnable=true
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="../build_test/windows/godot_pnid_viewer.exe"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false

[preset.0.options]

custom_template/debug=""
custom_template/release=""
debug/export_console_wrapper=1
binary_format/embed_pck=false
texture_format/bptc=true
texture_format/s3tc=true
texture_format/etc=false
texture_format/etc2=false
binary_format/architecture="x86_64"
codesign/enable=false
codesign/timestamp=true
codesign/timestamp_server_url=""
codesign/digest_algorithm=1
codesign/description=""
codesign/custom_options=PackedStringArray()
application/modify_resources=true
application/icon=""
application/console_wrapper_icon=""
application/icon_interpolation=4
application/file_version=""
application/product_version=""
application/company_name=""
application/product_name=""
application/file_description=""
application/copyright=""
application/trademarks=""
application/export_angle=0
ssh_remote_deploy/enabled=false
ssh_remote_deploy/host="user@host_ip"
ssh_remote_deploy/port="22"
ssh_remote_deploy/extra_args_ssh=""
ssh_remote_deploy/extra_args_scp=""
ssh_remote_deploy/run_script="Expand-Archive -LiteralPath '{temp_dir}\\{archive_name}' -DestinationPath '{temp_dir}'
$action = New-ScheduledTaskAction -Execute '{temp_dir}\\{exe_name}' -Argument '{cmd_args}'
$trigger = New-ScheduledTaskTrigger -Once -At 00:00
$settings = New-ScheduledTaskSettingsSet
$task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings
Register-ScheduledTask godot_remote_debug -InputObject $task -Force:$true
Start-ScheduledTask -TaskName godot_remote_debug
while (Get-ScheduledTask -TaskName godot_remote_debug | ? State -eq running) { Start-Sleep -Milliseconds 100 }
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue"
ssh_remote_deploy/cleanup_script="Stop-ScheduledTask -TaskName godot_remote_debug -ErrorAction:SilentlyContinue
Unregister-ScheduledTask -TaskName godot_remote_debug -Confirm:$false -ErrorAction:SilentlyContinue
Remove-Item -Recurse -Force '{temp_dir}'"

[preset.1]

name="Web"
platform="Web"
runnable=true
dedicated_server=false
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="../build_test/html/godot_pnid_viewer.html"
encryption_include_filters=""
encryption_exclude_filters=""
encrypt_pck=false
encrypt_directory=false

[preset.1.options]

custom_template/debug=""
custom_template/release=""
variant/extensions_support=false
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script>
function getFile(callback){
	window.input = document.createElement('input');
	input.type = 'file';
	input.multiple='multiple';

	input.onchange = e => {
		var files = e.target.files;
		var img_files = [];
		var xml_files = [];
		[...files].forEach(file => {
    		if(file.name.includes(\".png\")) {
        		img_files.push(file);
    		}
    		else if(file.name.includes(\".xml\")) {
        		xml_files.push(file);
    		}
		})
		
		// read xml to string
		var reader = new FileReader();		
		var xml_strs = [];
		var xml_filenames = [];
   		[...xml_files].forEach(xml_file => {
			reader.readAsText(xml_file, 'UTF-8');
			reader.onload = readerEvent => {
				xml_filenames.push(xml_file.name);
				xml_strs.push(readerEvent.target.result);
			}
		})
		
		// read image
		var img = new Image();
		var img_filename = img_files[0].name;
		img.src = URL.createObjectURL(img_files[0]);
		img.crossOrigin = \"\";
		img.onload = () => {
			//var img_buf = await (await fetch(img.src)).arrayBuffer();
			callback(img_filename, img.src, xml_filenames[0], xml_strs[0]);
		}
		
		/*var img_buffer;
		var img_filename = img_files[0].name;
		var img_reader = new FileReader();
		img_reader.readAsBinaryString(img_files[0]);
		img_reader.onload = readerEvent => {
			img_filename = img_files[0].name;
			img_buffer = reader.target.result;
		}

		callback(img_filename, img_buffer, xml_filenames[0], xml_strs[0]);*/
  }
}
</script>"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=false
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color(0, 0, 0, 1)
